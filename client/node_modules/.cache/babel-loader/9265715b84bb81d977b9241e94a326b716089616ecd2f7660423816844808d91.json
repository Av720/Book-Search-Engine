{"ast":null,"code":"// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\nclass AuthService {\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // if the user is logged in / then \n  loggedIn() {\n    // this will check if the token has been saved and valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // this will check if the token is expired \n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n  getToken() {\n    // this will obtain the token from local storage\n    return localStorage.getItem('id_token');\n  }\n  login(idToken) {\n    // thsi will save the token when logged in to local storage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n  logout() {\n    // when logged out, this will remove the token from local storage\n    localStorage.removeItem('id_token');\n    window.location.assign('/');\n  }\n}\nconst Auth = new AuthService();\nexport default Auth;","map":{"version":3,"names":["decode","AuthService","getProfile","getToken","loggedIn","token","isTokenExpired","decoded","exp","Date","now","err","localStorage","getItem","login","idToken","setItem","window","location","assign","logout","removeItem","Auth"],"sources":["C:/Users/valen/Book-Search-Engine/client/src/utils/auth.js"],"sourcesContent":["// use this to decode a token and get the user's information out of it\nimport decode from 'jwt-decode';\n\nclass AuthService{\n  // get user data\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  // if the user is logged in / then \n  loggedIn() {\n    // this will check if the token has been saved and valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token); // handwaiving here\n  }\n\n  // this will check if the token is expired \n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // this will obtain the token from local storage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // thsi will save the token when logged in to local storage\n    localStorage.setItem('id_token', idToken);\n    window.location.assign('/');\n  }\n\n  logout() {\n    // when logged out, this will remove the token from local storage\n    localStorage.removeItem('id_token');\n   \n    window.location.assign('/');\n  }\n}\n\nconst Auth = new AuthService();\n\nexport default Auth;"],"mappings":"AAAA;AACA,OAAOA,MAAM,MAAM,YAAY;AAE/B,MAAMC,WAAW;EACf;EACAC,UAAUA,CAAA,EAAG;IACX,OAAOF,MAAM,CAAC,IAAI,CAACG,QAAQ,EAAE,CAAC;EAChC;;EAEA;EACAC,QAAQA,CAAA,EAAG;IACT;IACA,MAAMC,KAAK,GAAG,IAAI,CAACF,QAAQ,EAAE;IAC7B,OAAO,CAAC,CAACE,KAAK,IAAI,CAAC,IAAI,CAACC,cAAc,CAACD,KAAK,CAAC,CAAC,CAAC;EACjD;;EAEA;EACAC,cAAcA,CAACD,KAAK,EAAE;IACpB,IAAI;MACF,MAAME,OAAO,GAAGP,MAAM,CAACK,KAAK,CAAC;MAC7B,IAAIE,OAAO,CAACC,GAAG,GAAGC,IAAI,CAACC,GAAG,EAAE,GAAG,IAAI,EAAE;QACnC,OAAO,IAAI;MACb,CAAC,MAAM,OAAO,KAAK;IACrB,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZ,OAAO,KAAK;IACd;EACF;EAEAR,QAAQA,CAAA,EAAG;IACT;IACA,OAAOS,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;EACzC;EAEAC,KAAKA,CAACC,OAAO,EAAE;IACb;IACAH,YAAY,CAACI,OAAO,CAAC,UAAU,EAAED,OAAO,CAAC;IACzCE,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,GAAG,CAAC;EAC7B;EAEAC,MAAMA,CAAA,EAAG;IACP;IACAR,YAAY,CAACS,UAAU,CAAC,UAAU,CAAC;IAEnCJ,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,GAAG,CAAC;EAC7B;AACF;AAEA,MAAMG,IAAI,GAAG,IAAIrB,WAAW,EAAE;AAE9B,eAAeqB,IAAI"},"metadata":{},"sourceType":"module","externalDependencies":[]}